apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.NAME }}
  namespace: {{ .Values.PROJECT }}-{{ .Values.env }}
  labels:
    chart: '{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}'
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  selector:
    matchLabels:
      app: {{ .Values.NAME }}
  template:
    metadata:
      labels:
        app: {{ .Values.NAME }}
    spec:
      containers:  [{  name: "{{ .Values.NAME }}", image: "{{ .Values.IMAGES }}",
{{ if eq .Values.env "stage" }}
		           envFrom: [{secretRef: {name: "{{ .Values.NAME }}"}}],
{{ end }}
{{ if eq .Values.env "prod" }}
                           envFrom: [{secretRef: {name: "{{ .Values.NAME }}"}}],
{{ end }}
                            livenessProbe: { failureThreshold: 3, initialDelaySeconds: 120, periodSeconds: 10, successThreshold: 1, tcpSocket: {port: {{ .Values.PORTS }}  }, timeoutSeconds: 1},
                            readinessProbe: { failureThreshold: 3, initialDelaySeconds: 120, periodSeconds: 10, successThreshold: 1, tcpSocket: {port: {{ .Values.PORTS }} }, timeoutSeconds: 1},
                            ports: [{containerPort: {{ .Values.PORTS }}, protocol: TCP }],
                            resources: {limits: {memory: "{{ .Values.MEMORY_LIMIT }}"}},
                            imagePullPolicy: Always }]


